#!/usr/bin/python

#
#  Copyright (c) 2009 The Trustees of Indiana University and Indiana
#                    University Research and Technology
#                    Corporation.  All rights reserved.
#
#  Author(s): Timo Schneider <timoschn@cs.indiana.edu>
#             Torsten Hoefler <htor@cs.indiana.edu>
#

from __future__ import print_function
import re, string, sys

if len(sys.argv) != 3:
    sys.exit("The program takes two argumnets:\n   Arg1: the .fdbs file generated with ibdiagnet\n   Arg2: the ibnetdiscover output.");

route_file = sys.argv[1]; # ibdiagnet.fdbs created with "ibdiagnet -v -o ."
topo_file = sys.argv[2]; # ibnetdiscover.out created with "ibnetdiscover -s"

class quick_regexp(object):
    """
    Quick regular expression class, which can be used directly in if() statements in a perl-like fashion.

    #### Sample code ####
    r = quick_regexp()
    if(r.search('pattern (test) (123)', string)):
        print(r.groups[0]) # Prints 'test'
        print(r.groups[1]) # Prints '123'
    """
    def __init__(self):
        self.groups = None
        self.matched = False

    def search(self, pattern, string, flags=0):
        match = re.search(pattern, string, flags)
        if match:
            self.matched = True
            if(match.groups()):
                self.groups = re.search(pattern, string, flags).groups()
            else:
                self.groups = True
        else:
            self.matched = False
            self.groups = None

        return self.matched

def hex_str_to_int(hex_str):
    """
    return the integer value of a hexadecimal string hex_str
    Since we use this function only for GUID conversion, we do not expect
    to get any negative hex value. So if the conversion fails, return -1.
    """
    try:
        ret = int(hex_str, 16)
    except:
        ret = -1

    return ret

def int_to_hex_str(number, hex_length = -2, prefix_with_0x = False):
    """
    Converts an int to a hex string with the number of hex_length zeros prepended
    """
    hex_str = "{0:#0{1}x}".format(number, hex_length + 2)

    if (not prefix_with_0x):
        hex_str = hex_str[2:len(hex_str)]

    return hex_str

r = quick_regexp()
graph = {}
lid_to_guid = {}

"""
Read the topology file and build the translation list for lids to guids
"""
with open(topo_file, mode='r', buffering=1) as topology_fd:
    for line in topology_fd:
        line = line.strip()
        isinstance(line, str)
        if line:
            # Do not read commented lines or empty lines
            if (r.search("(^\s*#|^$)", line)):
                continue

            # The following regexp will only read the switch port lines from a dump.
            #
            # In each switch port line we can find the guid of the remote node that is connected in the
            # current switch port. In the comments section of each switch port line we can find the lid
            # of the remote node that is connected in the current switch port.
            if (r.search("^\[\d+\]\s+\"(H|S)-(\w+)\"\[\d+\](\(\w+\))?\s+#.*lid\s+(\d+)", line)):
                # The remote_node_type is either "H" for Hca, or "S" for Switch.
                remote_node_type = r.groups[0]
                # The remote_guid of the switches is stored at r.groups[1], but if the remote node is an Hca
                # r.groups[1] holds the node  guid. However, the Hcas have a different guid for each one of their
                # ports, that is stored in r.groups[2].
                if remote_node_type == 'S':
                    remote_guid = hex_str_to_int(r.groups[1])
                else:
                    # r.groups[2] looks like this: (0x123456), so with the following replace lines, we remove the
                    # parentheses and keep only the GUID value 0x123456
                    remote_guid = hex_str_to_int(r.groups[2].replace('(', '').replace(')', ''))
                remote_lid = int(r.groups[3])

                # Make a sanity check if the lid has already been added in the lid_to_guids dict
                if lid_to_guid.has_key(remote_lid):
                    if lid_to_guid[remote_lid] != remote_guid:
                        print("LID {} points to two different GUIDs: {} and {}.".format(remote_lid, remote_guid, lid_to_guid[remote_lid]))
                        print("There must be something wrong with the topology.")
                        exit(1)
                else:
                    lid_to_guid[remote_lid] = remote_guid
                    #print(remote_lid, remote_guid)

for lid in sorted(lid_to_guid.keys()):
    print('/*', 'LID:', lid, 'is assigned to GUID:', int_to_hex_str(lid_to_guid[lid], 16, True), '*/')

"""
read the routingtable from ibdiagnet.fdbs into the dict routingtable!
"""
with open(route_file, mode='r', buffering=1) as routes_fd:
    for line in routes_fd:
        # Do not read commented lines or empty lines
        if (r.search("(^\s*#|^$)", line)):
            continue

        if(r.search("^osm.*Switch\s+0x(\w+)", line)):
            # Get the GUID of the switch
            switch = hex_str_to_int(r.groups[0])

        if(r.search("^(0x\w+)\s+:\s+(\w+)", line)):
            if (r.groups[1] == "UNREACHABLE"):
                continue

            lid = hex_str_to_int(r.groups[0])
            sw_port = "{}:{}".format(int_to_hex_str(switch, 16), r.groups[1])

            if (not lid_to_guid.has_key(lid)):
                print("// host lid {} not in {} - ignoring it".format(lid, topo_file))
            else:
                guid = lid_to_guid[lid]
                if(graph.has_key(sw_port)):
                    # H means route to host - all routes are to hosts, so even switches are treated like hosts :-)
                    graph[sw_port] = graph[sw_port] + ",H{}".format(int_to_hex_str(guid, 16))
                else:
                    graph[sw_port] = "H{}".format(int_to_hex_str(guid, 16))

#for sw_port in sorted(graph.keys()):
#    print(sw_port, graph[sw_port])

print("digraph network {")

switch = None  # When we are "in a" Switch block set the switch to the GUID of the switch.
               # a block is finished by an empty line.
with open(topo_file, mode='r', buffering=1) as topology_fd:
    for line in topology_fd:
        # an empty line -> reset switch by setting to None
        if (r.search("^$", line)):
            switch = None

        if (r.search("^Switch\s+\d+\s+\"S-(\w+)\"", line)):
            switch = r.groups[0]

        if(switch):
            if (r.search("^\[(\d+)\]\s+\"(H|S)-(\w+)\"\[\d+\](\(\w+\))?", line)): # this is a port at the current switch
                port = r.groups[0];
                remote_node_type = r.groups[1]
                if remote_node_type == 'S':
                    target_node = int_to_hex_str(
                        hex_str_to_int(r.groups[2]),
                        16)
                else:
                    target_node = "H{}".format(int_to_hex_str(
                        hex_str_to_int(r.groups[3].replace('(', '').replace(')', '')),
                        16))
                source_sw_port = "{}:{:#03d}".format(switch, int(port))

                if(graph.has_key(source_sw_port)):
                    print("  \"{0}\" -> \"{1}\" [ key=\"{0}:port-{2:#03d} to {1}\", comment=\"{3}\" ];".format(switch, target_node, int(port), graph[source_sw_port]))
                    # on request ... if we have a route to a host - print also
                    # the route from the host ...
                    if (r.search("^H", target_node)):
                        print("  \"{0}\" -> \"{1}\" [ key=\"{0} to {1}\", comment=\"*\" ];".format(target_node, switch))
                else:
                    print("/* there is a problem with switch:port {} */".format(source_sw_port))
                    print("  \"{}\" -> \"{}\";".format(switch, target_node))

print("}")
